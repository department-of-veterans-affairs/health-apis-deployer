#!/usr/bin/env bash
. $PLUGIN_LIB
set -euo pipefail

ECS_PARAM_FILE=$DU_DIR/ecs/ecs-params.yml
ECS_DOCKER_COMPOSE_FILE=$DU_DIR/ecs/docker-compose.yml
ECS_DEBUG=$WORK/ecs.debug

on-activate() {
  if [ ! -f $ECS_DOCKER_COMPOSE_FILE ]; then return $PLUGIN_DISABLED; fi
  if [ ! -f $ECS_PARAM_FILE ]; then return $PLUGIN_DISABLED; fi
  return $PLUGIN_ENABLED
}

on-initialize() {
  checkExposedService
  updateDockerCompose
  updateEcsParams
}

on-deploy-green() {
  local tgArn
  tgArn=$(createNewTargetGroup)
  save "new-tg-arn" "$tgArn"
  echo "Target group $tgArn"
  replaceAlbRulesOnGreen \
    $GREEN_LOAD_BALANCER_PROTOCOL \
    $GREEN_LOAD_BALANCER_NAME \
    $GREEN_LOAD_BALANCER_PORT \
    "$tgArn"
  deployService $tgArn
  waitToBeHealthy \
    $GREEN_LOAD_BALANCER_PROTOCOL \
    $GREEN_LOAD_BALANCER_NAME \
    $GREEN_LOAD_BALANCER_PORT \
  return 0
}

on-switch-to-blue() {
  local tgArn
  tgArn=$(recall "new-tg-arn")
  removeNewRules green
  addAlbRulesOnBlue \
    $BLUE_LOAD_BALANCER_PROTOCOL \
    $BLUE_LOAD_BALANCER_NAME \
    $BLUE_LOAD_BALANCER_PORT \
    "$tgArn"
  return 0
}

on-after-verify-blue() {
  removeOldRules
  removeTargetGroup old
  removeServices old
  removeTaskDefinition old
  return 0
}

on-rollback() {
  rollbackOldRules
  removeNewRules blue
  removeNewRules green
  removeTargetGroup new
  removeServices new
  removeTaskDefinition new
  return 0
}


cluster() {
  echo "lighthouse-${ENVIRONMENT}"
}

deployService() {
  local tgArn=$1
  ecs-cli \
    compose \
    --project-name $(taskDefName) \
    --ecs-params $ECS_PARAM_FILE\
    --file $ECS_DOCKER_COMPOSE_FILE \
    service up \
    --create-log-groups \
    --cluster $(cluster) \
    --launch-type FARGATE \
    --target-groups $(ecsTargetGroupSpecification "$tgArn")

  echo "Waiting for service to deploy..."
  local wait=180
  local timeout=$(($(date +%s) + $wait))
  while [ $(date +%s) -lt $timeout ]
  do
    if ecs-cli ps --cluster $(cluster) --desired-status RUNNING \
      | grep HEALTHY \
      | grep "$(taskDefName)"
    then
      return 0
    fi
    sleep 10
  done
  abort "Timeout waiting for healthy ECS service"
}

ecsTargetGroupSpecification() {
  local tgArn=$1
  local containerPort
  containerPort=$(docker-compose-editor exposed-port \
    --in $ECS_DOCKER_COMPOSE_FILE \
    --service $DU_ECS_EXPOSE_SERVICE)
  echo "targetGroupArn=$tgArn,containerName=$DU_ECS_EXPOSE_SERVICE,containerPort=$containerPort"
}

waitToBeHealthy() {
  local protocol=$1
  local alb=$2
  local port=$3
  for path in ${DU_LOAD_BALANCER_RULES[@]}
  do
    alb rule-health \
      --name $alb \
      --protocol $protocol \
      --port $port \
      --path "$path" \
      --wait 180
  done
}

replaceAlbRulesOnGreen() {
  local protocol=$1
  local alb=$2
  local port=$3
  local tgArn=$4
  echo "Replacing ALB rules on ${alb} for ${protocol} protocol on port ${port}"
  for priority in ${!DU_LOAD_BALANCER_RULES[@]}
  do
    local path="${DU_LOAD_BALANCER_RULES[$priority]}"
    alb replace-rule \
      --name $alb \
      --protocol $protocol \
      --port $port \
      --path "$path" \
      --target-group $tgArn \
      --min-priority $priority \
      --output $WORK/ecs-green-rule
    jq -r '.Rules[].RuleArn' $WORK/ecs-green-rule >> $WORK/ecs-green-rules

  done
}

addAlbRulesOnBlue() {
  local protocol=$1
  local alb=$2
  local port=$3
  local tgArn=$4
  echo "Adding ALB rules on ${alb} for ${protocol} protocol on port ${port}"
  for priority in ${!DU_LOAD_BALANCER_RULES[@]}
  do
    local path="${DU_LOAD_BALANCER_RULES[$priority]}"
    alb rule-details \
      --name $alb \
      --protocol $protocol \
      --port $port \
      --path "$path" \
      | jq -r '[.RuleArn,.Priority]|join(" ")' \
      >> $WORK/ecs-existing-rules
  done

  for priority in ${!DU_LOAD_BALANCER_RULES[@]}
  do
    local path="${DU_LOAD_BALANCER_RULES[$priority]}"
    alb add-rule \
      --name $alb \
      --protocol $protocol \
      --port $port \
      --path "$path" \
      --target-group $tgArn \
      --min-priority $priority \
      --output $WORK/ecs-blue-rule
    jq -r '.Rules[].RuleArn' $WORK/ecs-blue-rule >> $WORK/ecs-blue-rules
  done

  if [ -f $WORK/ecs-existing-rules ]
  then
    echo "Deprioritizing old rules"
    local maxPriority
    maxPriority=$(alb rule-summary -n $alb --port $port --protocol $protocol \
      | awk 'BEGIN {max=2000} /^[0-9]/ {if ($1 > max) max=$1} END {print max}')
    local priorities
    while read arn priority
    do
      if [ "$priority" -lt 2000 ]
      then
        maxPriority=$(($maxPriority + 1))
        priorities+="RuleArn=$arn,Priority=$maxPriority "
        echo "Moving $arn from slot $priority to $maxPriority"
      fi
    done < $WORK/ecs-existing-rules
    if [ -n "${priorities:-}" ]
    then
      if ! aws elbv2 set-rule-priorities --rule-priorities $priorities --output text 2>&1 > $ECS_DEBUG
      then
        cat $ECS_DEBUG
        return 1
      fi
    fi
  fi
}

removeOldRules() {
  if [ -f $WORK/ecs-existing-rules ]
  then
    echo "Deleting old rules..."
    echo "Rules" > $ECS_DEBUG
    local failed=false
    while read arn priority
    do
      echo "Deleting $arn"
      if ! aws elbv2 delete-rule --rule-arn $arn 2>&1 >> $ECS_DEBUG
      then
        failed=true
      fi
    done < $WORK/ecs-existing-rules
    if [ $failed != false ]
    then
      cat $ECS_DEBUG
      return 1
    fi
  fi
}

removeNewRules() {
  local color="$1"
  if [ -f $WORK/ecs-$color-rules ]
  then
    echo "Deleting new $color rules..."
    echo "Rules" > $ECS_DEBUG
    local failed=false
    while read arn
    do
      echo "Deleting $arn"
      if ! aws elbv2 delete-rule --rule-arn $arn 2>&1 | tee -a $ECS_DEBUG
      then
        failed=true
      fi
    done < $WORK/ecs-$color-rules
    if [ $failed != false -o "${DEBUG:-}" == true ]
    then
      cat $ECS_DEBUG
      return 1
    fi
  fi
  sleep 2
}

removeTargetGroup() {
  local who=$1
  case $who in
    old) local opt="-v";;
    new) local opt="";;
    *) abort "must be 'old' or 'new'";;
  esac
  echo "Deleting $who target groups..."
  echo "Target groups" > $ECS_DEBUG
  local failed=false
  while read arn
  do
    echo "Deleting $arn"
    if ! aws elbv2 delete-target-group --target-group-arn $arn 2>&1 >> $ECS_DEBUG
    then
      failed=true
    fi
  done < <(aws elbv2 describe-target-groups \
    --output text \
    --query "TargetGroups[?starts_with(TargetGroupName,'$(awsPrefix)')].[TargetGroupArn]" \
    | grep $opt "$(tgName)")
  if [ $failed != false -o "${DEBUG:-}" == true ]
  then
    cat $ECS_DEBUG
    return 1
  fi
}

removeTaskDefinition() {
  local who=$1
  case $who in
    old) local opt="-v";;
    new) local opt="";;
    *) abort "must be 'old' or 'new'";;
  esac
  echo "Deleting $who task definitions..."
  if [ "${DEBUG:-}" == "true" ]
  then
    echo "Current task definitions"
    aws ecs list-task-definitions \
      --no-paginate \
      --query "taskDefinitionArns[? contains(@,'$(awsPrefix)')]"
  fi
  echo "Task definitions" > $ECS_DEBUG
  local failed=false
  while read arn
  do
    echo "Deleting $arn"
    if ! aws ecs deregister-task-definition --task-definition $arn --output text 2>&1 >> $ECS_DEBUG
    then
      failed=true
    fi
  done < <(aws ecs list-task-definitions \
    --query "taskDefinitionArns[? contains(@,'$(awsPrefix)')]" \
    | jq -r .[] \
    | grep $opt "$(taskDefName)")
  if [ $failed != false ]
  then
    cat $ECS_DEBUG
    return 1
  fi
}

removeServices() {
  local who=$1
  case $who in
    old) local opt="-v";;
    new) local opt="";;
    *) abort "must be 'old' or 'new'";;
  esac
  echo "Deleting $who services..."
  if [ "${DEBUG:-}" == true ]
  then
    echo "Current services"
    aws ecs list-services \
      --cluster $(cluster) \
      --query "serviceArns[? contains(@,'$(awsPrefix)')]"
  fi
  local failed=false
  echo "Services" > $ECS_DEBUG
  while read arn
  do
    echo "Deleting $arn"
    if ! aws ecs delete-service --cluster $(cluster) --service $arn --force --output text 2>&1 >> $ECS_DEBUG
    then
      failed=true
    fi
  done < <(aws ecs list-services \
    --cluster $(cluster) \
    --query "serviceArns[? contains(@,'$(awsPrefix)')]" \
    | jq -r .[] \
    | grep $opt "$(taskDefName)")
  if [ $failed != false ]
  then
    cat $ECS_DEBUG
    return 1
  fi
}

rollbackOldRules() {
  echo "Rolling back rule changes..."
  if [ -f $WORK/ecs-existing-rules ]
  then
    echo "Reprioritizing old rules"
    local priorities
    while read arn priority
    do
      priorities+="RuleArn=$arn,Priority=$priority "
      echo "Moving $arn back to slot $priority"
    done < $WORK/ecs-existing-rules
    if ! aws elbv2 set-rule-priorities --rule-priorities $priorities --output text 2>&1 > $ECS_DEBUG
    then
      echo "FAILED TO ROLLBACK RULES"
      cat $ECS_DEBUG
      return 1
    fi
  fi
}

awsPrefix() {
  echo "ecs-${PRODUCT}-${SHORT_ENVIRONMENT}-"
}

tgName() {
  echo "$(awsPrefix)${BUILD_NUMBER}-tg"
}

taskDefName() {
  echo "$(awsPrefix)${BUILD_NUMBER}"
}

createNewTargetGroup() {
  local targetGroupName= containerPort= tgArn=
  targetGroupName=$(tgName)
  containerPort=$(docker-compose-editor exposed-port \
    --in $ECS_DOCKER_COMPOSE_FILE \
    --service $DU_ECS_EXPOSE_SERVICE)
  aws elbv2 create-target-group \
    --vpc-id $(vpc id-for-environment -e $VPC) \
    --name $targetGroupName \
    --port $containerPort \
    --target-type ip \
    --protocol HTTP \
    --health-check-protocol HTTP \
    --health-check-port traffic-port \
    --health-check-enabled \
    --health-check-interval-seconds 30 \
    --health-check-timeout-seconds 5 \
    --healthy-threshold-count 3 \
    --unhealthy-threshold-count 3 \
    --health-check-path "$DU_HEALTH_CHECK_PATH" \
    --matcher HttpCode=200 \
    > $WORK/$targetGroupName
  tgArn=$(jq -r '.TargetGroups[].TargetGroupArn' $WORK/$targetGroupName)
  echo $tgArn
}

checkExposedService() {
  if [ -z "${DU_ECS_EXPOSE_SERVICE:-}" ]
  then
    abort "DU_ECS_EXPOSE_SERVICE is not defined in product conf"
  fi
  local port=
  port=$(docker-compose-editor exposed-port -i $ECS_DOCKER_COMPOSE_FILE -s $DU_ECS_EXPOSE_SERVICE)
  if [ -z "$port" ]
  then
    abort "Service $ECS_DOCKER_COMPOSE_FILE does not appear to be mapped to a port"
  fi
}

updateEcsParams() {
  local subnets securityGroups
  subnets=$(vpc subnets -e $VPC)
  local securityGroupName="ecs-task-${ENVIRONMENT}-sg"
  securityGroups=$(vpc security-groups -g $securityGroupName -e $VPC)

  echo "Using subnets $subnets"
  echo "Using security group $securityGroupName ($securityGroups)"
  if [ -z "$subnets" ]; then abort "Subnets not found for $VPC"; fi
  if [ -z "$securityGroups" ]; then abort "Security groups not found for $securityGroupName"; fi

  substitute-env rewrite -e $PLUGIN_SUBSTITION_DIR -f $ECS_PARAM_FILE
  ecs-params-editor rewrite \
    -i $ECS_PARAM_FILE \
    -o $ECS_PARAM_FILE \
    --replace-subnets "$subnets" \
    --replace-security-groups "$securityGroups" \
    --replace-task-execution-role "$ECS_TASK_EXECUTION_ROLE"

  banner file -m $(basename $ECS_PARAM_FILE)
  cat $ECS_PARAM_FILE
  banner file -m eof
}

updateDockerCompose() {
  substitute-env rewrite -e $PLUGIN_SUBSTITION_DIR -f $ECS_DOCKER_COMPOSE_FILE
  local image= org= name= version=
  for service in $(docker-compose-editor services -i $ECS_DOCKER_COMPOSE_FILE)
  do
    echo "Updating $service definition"
    image=$(docker-compose-editor image -i $ECS_DOCKER_COMPOSE_FILE -s $service)
    if [[ ! "$image" =~ ([^/]*)/([^:]*):(.*) ]]; then abort "Do not understand image: $image"; fi
    org="${BASH_REMATCH[1]}"
    name="${BASH_REMATCH[2]}"
    tag="${BASH_REMATCH[3]}"
    if [[ $org != *dkr.ecr.*.amazonaws.com* ]]
    then
      local ecrImage
      ecrImage="$(ecr hostname -n $name)/$name:$tag"
      importToEcr "$image" "$ecrImage"
      docker-compose-editor rewrite \
        -i $ECS_DOCKER_COMPOSE_FILE \
        -o $ECS_DOCKER_COMPOSE_FILE \
        --replace-image "$service:$ecrImage"
    fi
  done
  banner file -m $(basename $ECS_DOCKER_COMPOSE_FILE)
  cat $ECS_DOCKER_COMPOSE_FILE
  banner file -m eof
}

importToEcr() {
  local image="$1"
  local ecrImage="$2"
  ecr login -n $name
  if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $ecrImage > /dev/null
  then
    echo "Image $image already exists as $ecrImage"
    return
  fi
  echo "Importing $image to $ecrImage"
  docker pull -q $image
  docker tag $image $ecrImage
  docker push $ecrImage
  docker rmi $image $ecrImage
}


main "$@"
exit 1
