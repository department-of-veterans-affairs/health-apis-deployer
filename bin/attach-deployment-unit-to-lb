#!/usr/bin/env bash

set -uo pipefail

#
# Helper script for blue-green deployment strategy
# This script will attach a product to a loadbalancer by...
# 1. Creating a target group, for the product, if one doesn't exist
# 2. Attaching the new/existing product target group to a singular
#    AZ's auto-scaling group
# 3. Creating a Load Balancer rule that routes traffic along a
#    given product's path, respecting priority
#

#
# Color of the load-balancer
# Blue - production/public traffic
# Green -testing/internal use
#
COLOR=$1

test -n "$COLOR"

[ "${LEAVE_ON_GREEN:-false}" == true ] \
  && [ "$COLOR" == "blue" ] \
  && exit 0

#
# The prefix we use for AZ's is the last character of the string...
# Example: us-gov-west-1a
#                       ^
#
AZ_ABREVIATION=${AVAILABILITY_ZONE: -1}

#
# Work around export arrays limitation
#
. $LOAD_BALANCER_RULES

test -n "$CLUSTER_ID"
test -n "$DU_HEALTH_CHECK_PATH"
test -n "${#DU_LOAD_BALANCER_RULES[@]}"
test -n "$AZ_ABREVIATION"
test -n "$VPC_NAME"


#
# We'll be doing some work in the back ground and will need to keep track of things
#
WORK=$(mktemp -p . -d work.XXXX )
trap onExit EXIT
onExit() {
  [ -d $WORK ] && rm -rf $WORK
}



echo "============================================================"
echo "Attaching $PRODUCT to $CLUSTER_ID $COLOR load balancer"

load-balancer create-target-group \
    --env "$VPC_NAME" \
    --cluster-id "$CLUSTER_ID" \
    --color "$COLOR" \
    --product "$PRODUCT" \
    --health-check-path="$DU_HEALTH_CHECK_PATH"

if [ $? != 0 ]; then echo "TARGET GROUP CREATION FAILED!!! $PRODUCT on $CLUSTER_ID $COLOR load balancer is potentially unstable!" && exit 1; fi


load-balancer enable-target-group \
    --env "$VPC_NAME" \
    --cluster-id "$CLUSTER_ID" \
    --color "$COLOR" \
    --product "$PRODUCT" \
    --az-abreviation="$AZ_ABREVIATION"

if [ $? != 0 ]; then echo "ENABLE TARGET GROUP FAILED!!! $PRODUCT on $CLUSTER_ID $COLOR load balancer is potentially unstable!" && exit 1; fi


#
# We're going to create the rules in the background.
# Because each rule has a dedicated slot that is separated enough from other rules
# such that we won't collide when looking for the next available ALB priority number.
# E.g. if I create rule 10 and 20 at the same time and both already exist, the
# load-balancer tool will find slots 11 and 21 independently.
#

#
# Step 1: Create rules in the background, capturing their output
#
declare -A pids
for priority in ${!DU_LOAD_BALANCER_RULES[@]}
do
  taskId="rule-$priority"
  rule="${DU_LOAD_BALANCER_RULES[$priority]}"
  echo "Creating rule $rule with minimum priority $priority"
  load-balancer create-rule \
    --env "$VPC_NAME" \
    --cluster-id "$CLUSTER_ID" \
    --color "$COLOR" \
    --product "$PRODUCT" \
    --rule-path "$rule" \
    --min-priority "$priority" \
    --az-abreviation "$AZ_ABREVIATION" \
    > $WORK/$priority 2>&1 &
  pids[$priority]=$!
  # Let's give AWS a second or two to breath when kicking off multiple background
  # jobs. They will still be happening in parallel, but perhaps this will ease
  # the spike when there are multiple rules.
  sleep 3
done

#
# Step 2: Wait for each create-rule process to complete, capturing their exit codes
#
echo "Waiting for rule creation processes to complete."
declare -A status
for priority in ${!pids[@]}
do
  wait ${pids[$priority]}
  status[$priority]=$?
done

#
# Step 3: Verify each status code was good (0) and print the captured output
#
failures=0
for priority in ${!pids[@]}
do
  rule="${DU_LOAD_BALANCER_RULES[$priority]}"
  echo "Created $rule ($priority) with status ${status[$priority]}"
  cat $WORK/$priority
  [ "${status[$priority]}" != 0 ] && failures=$(($failures + 1))
done

#
# Step 4: Profit
#
if [ $failures != 0 ]
then
  echo "Failed to create $failures rules! $PRODUCT on $CLUSTER_ID $COLOR is potentially unstable!" | tee -a ${JENKINS_DESCRIPTION}
  exit 1
fi
