#!/usr/bin/env bash
set -euo pipefail

export CACHE_NAME="alb"
export CACHE_EXPIRATION="1 minute"
export PATH=$(dirname $(readlink -f $0))/bin:$PATH

ORGINAL_COMMAND_LINE="$@"
usage() {
cat >&2 <<EOF
$0 [options] <command>

Interact with NLBs.

Options
-n, --name <name>
  The NLB name
--port <number>
  The listener port number
--target-group <target-group-arn>
  The ARN of the target group to apply to rule

Commands
arn -n <name>
  Print the ARN for the NLB
listener-arn -n <name> --port <n>
  Print the ARN for the listener on the NLB for the given port.
add-listener -n <name> --port <n> --target-group <arn>
  Add a new listener on the NLB for given port that forwards
  traffic to the target group.
update-listener -n <name> --port <n> --target-group <arn>
  Update an existing listener on the NLB for given port so that
  it forwards traffic to the target group.
set-listener -n <name> --port <n> --target-group <arn>
  Add a new listener or update an existing listener on the NLB
  for given port so that it forwards traffic to the target group.

$ORGINAL_COMMAND_LINE

${1:-}
EOF
exit 1
}

PROTOCOL=TCP
main() {
  local args
  local longOpts="debug,help,name:,port:,target-group:"
  local shortOpts=""
  if ! args=$(getopt -l "$longOpts" -o "$shortOpts" -- "$@"); then usage; fi
  eval set -- "$args"
  while true
  do
    case "$1" in
      --debug) DEBUG=true;;
      --help) usage;;
      --name) NAME="$2";;
      --port) PORT="$2";;
      --target-group) TARGET_GROUP="$2";;
      --) shift; break;;
    esac
    shift
  done
  if [ -z "${DEBUG:-}" ]; then DEBUG=false; fi
  if [ "$DEBUG" == "true" ]; then set -x; fi

  if [ $# != 1 ]; then usage "Command not specified"; fi
  local command=$1
  case $command in
    arn) arn;;
    listener-arn) listener-arn;;
    add-listener) add-listener;;
    update-listener) update-listener;;
    set-listener) set-listener;;
  esac
}

requireParam() {
  local param="${1}"
  local value="${2:-}"
  if [ -z "$value" ]; then usage "Parameter not specified: $param"; fi
}

requireValue() {
  local value="${1:-}"
  local message="$2"
  if [ -z "$value" ]; then echo "$message"; exit 1; fi
}

arn() {
  requireParam "name" "${NAME:-}"
  cache "nlb-$NAME" aws elbv2 describe-load-balancers --names $NAME \
    | jq -r '.LoadBalancers[].LoadBalancerArn'
}

listener-arn() {
  requireParam "port" "${PORT:-}"
  cache "nlb-listener-arn-$NAME-$PROTOCOL-$PORT" \
    aws elbv2 describe-listeners --load-balancer-arn $(arn) \
    | jq -r --arg port $PORT --arg protocol $PROTOCOL \
    '.Listeners[]|select(.Port == ($port|tonumber) and .Protocol == $protocol)|.ListenerArn'
}

add-listener() {
  requireParam "port" "${PORT:-}"
  requireParam "target-group" "${TARGET_GROUP:-}"
  echo "Adding listener on port $PORT to ${NAME:-}"
  aws elbv2 create-listener \
    --load-balancer-arn $(arn) \
    --protocol $PROTOCOL \
    --port "$PORT"  \
    --default-actions "Type=forward,TargetGroupArn=$TARGET_GROUP"
}

update-listener() {
  requireParam "port" "${PORT:-}"
  requireParam "target-group" "${TARGET_GROUP:-}"
  echo "Updating listener on port $PORT for ${NAME:-}"
  local listenerArn
  listenerArn=$(listener-arn)
  if [ -z "${listenerArn:-}" ]; then usage "Listener not found for port $PORT"; fi
  aws elbv2 modify-listener \
    --listener-arn "$listenerArn" \
    --protocol $PROTOCOL \
    --port "$PORT"  \
    --default-actions "Type=forward,TargetGroupArn=$TARGET_GROUP"
}

set-listener() {
  local listenerArn
  listenerArn=$(listener-arn)
  if [ -z "${listenerArn:-}" ]
  then
    add-listener
  else
    update-listener
  fi
}


main "$@"
exit 0
