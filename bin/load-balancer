#!/usr/bin/env bash

#set -euo pipefail

usage() {
cat<<EOF > /dev/stderr
$0 <command> [options]

COMMANDS
  create-target-group --env <ENV> --cluster-id <cid> --color <color> --product <product> --health-check-path <hc-path>
    Create an AWS target group to be used for the chosen product-env-color.
  delete-target-group --env <ENV> --cluster-id <cid> --color <color> --product <product>
    Delete an AWS target group for a chosen product.
  enable-target-group --env <ENV> --cluster-id <cid> --color <color> --product <product> --az-abreviation <a | b | c>
    Activate an existing AWS target group. Attach the target group for
    a given product to an AZ's Autoscaling group.
  disable-target-group --env <ENV> --cluster-id <cid> --color <color> --product <product> --az-abreviation <a | b | c>
    Deactive the chosen AWS target group. Remove the target group for
    a given product from an AZ's Autoscaling group.
  create-rule --env <ENV> --cluster-id <cid> --color <color> --product <product> --rule-path <r-path> --min-priority <priority-group> --az-abreviation <a | b | c>
    Create a rule in the ALB.
  delete-rule --env <ENV> --cluster-id <cid> --color <color> --product <product> --rule-path <r-path>
    Delete a rule from the ALB.
  delete-all-rules --env <ENV> --cluster-id <cid> --color <color>
    Delete all rules, except the default, from the ALB.
  rule-health --env <ENV> --cluster-id <cid> --color <color> --rule-path <path>
    Test the health of a rule's target group's targets.
  list-rules --env <ENV> --color <color> [--unhealthy]
    List the rules with health status for a specific load balancer
  list-certificates
    List the domains for the available certficates. This can be used
    with the --certificate option.
  list-environments
    List environments available based on the Environment tag of VPCs.
OPTIONS
  --az-abreviation <az>
    The AWS AZ quantifier. For Example: a
  --cluster-id <cid>
    The Kubernetes cluster-id. For Example: q4n
  --color <color>
    The deployment color. For Example: blue
  --debug
    Do you want all of the spam?
  --env <ENV>
    The AWS vpc. For Example: QA
  --health-check-path <hc-path>
    The path the load balancer will take for health checking. For Example: "/fhir/v0/argonaut/data-query/actuator/health"
  --health-check-interval <interval>
    The AWS health check interval(seconds). For Example: 10
  --health-check-timeout <timeout>
    The AWS health check timeout(seconds). For Example: 30
  --health-check-healthy-threshold <threshold>
   The AWS healthy threshold. For example: 5
  --health-check-unhealthy-threshold <threshold>
   The AWS unhealth threshold. For example: 2
  --help
   Usage.
  --min-priority <priority>
    The minimum priority the given rule will have. If not set, the rule gets the next available priority.
    For Example: 100
  --product <name>
    The name of the product being deployed. For example: data-query
  --rule-path
    The route rule for standard traffic from the ALB to your product.
    For example: */fhir/v0/argonaut/data-query/*
  --tg-drain-seconds
    The drain time your target group will respect, when detached or deleted. Default 60 seconds.
    For example: 120

EOF
echo -e "$1" > /dev/stderr
exit 1
}

ORIGINAL_COMMAND=="$0 $@"

#
# Create a temporary workspace
#
WORK=$(mktemp -p . -d work.XXXX )
trap onExit EXIT
onExit() {
  [ -d $WORK ] && rm -rf $WORK
}

#
# Commands
#
#============================================================

cacheFileName() {
  local name="$1"
  local hash=$(echo "$name" | md5sum | cut -d ' ' -f 1)
  echo "$CACHE_DIR/$hash"
}

cacheGet() {
  local name="$1"
  local cache=$(cacheFileName "$name")
  [ -f "$cache" ] && [ "$(stat -c %s "$cache")" -gt 0 ] && cat "$cache"
}
cacheSet() {
  local name="$1"
  local cache=$(cacheFileName "$name")
  local value="$2"
  echo "$value" > "$cache"
}
cacheDelete() {
  local name="$1"
  local cache=$(cacheFileName "$name")
  [ -f "$cache" ] && rm "$cache"
}

vpcId() {
  local vpcCache="vpcId-$VPC_ENV"
  local cached=$(cacheGet $vpcCache)
  if [ -n "$cached" ]; then
    echo $cached
  else
    local vpcId=$(aws ec2 describe-vpcs --filters Name=tag:Environment,Values=$VPC_ENV | jq -r .Vpcs[].VpcId)
    [ -z "$vpcId" ] && echo "Could not find VPC for environment $VPC_ENV" && exit 1
    cacheSet $vpcCache $vpcId
    echo $vpcId
  fi
}

tgName() {
  [ -z "$PRODUCT" ] && usage "Product name not specified"
  [ -z "$CLUSTER_ID" ] && usage "Cluster ID not specified"
  [ -z "$COLOR" ] && usage "Color not specified"
  echo $CLUSTER_ID-$PRODUCT-$COLOR | tr -dc '[a-z][A-Z][0-9]-'
}

targetGroupArn() {
  local tgName
  tgName=$(tgName) || exit 1
  local cached=$(cacheGet tg-arn-$tgName)
  if [ -n "$cached" ]; then
    echo $cached
  else
    local targetGroupArn=$(aws elbv2 describe-target-groups \
      --names "$tgName" \
      | jq -r '.TargetGroups[].TargetGroupArn')
    cacheSet "tg-arn-$tgName" "$targetGroupArn"
    echo $targetGroupArn
  fi
}

targetLocation() {
  local targetId=$1
  local cacheName=az-target-$targetId
  local cached=$(cacheGet $cacheName)
  if [ -n "$cached" ]; then
    echo $cached
  else
    local targetAz=$(aws ec2 describe-instances --instance-ids $targetId \
      | jq -r '.Reservations[].Instances[].Tags[] | select(.["Key"] == "KubernetesAvailabilityZone") | .Value')
    cacheSet "$cacheName" "$targetAz"
    echo $targetAz
  fi
}

createTargetGroup() {
  local tgName
  tgName=$(tgName) || exit 1
  [ -z "$HEALTH_CHECK_PATH" ] && usage "Health check path not specified"

  if [ -z "$(targetGroupArn)" ]; then
    echo "Creating target group: $tgName"
    aws elbv2 create-target-group \
      --name $tgName \
      --protocol HTTPS \
      --port 30443 \
      --vpc-id $(vpcId) \
      --target-type instance \
      --health-check-protocol HTTPS \
      --health-check-port traffic-port \
      --health-check-path "$HEALTH_CHECK_PATH" \
      --health-check-interval-seconds "$HEALTH_CHECK_INTERVAL" \
      --health-check-timeout-seconds "$HEALTH_CHECK_TIMEOUT" \
      --healthy-threshold-count "$HEALTH_CHECK_HEALTHY_THRESHOLD" \
      --unhealthy-threshold-count "$HEALTH_CHECK_UNHEALTHY_THRESHOLD" \
      --matcher HttpCode="${DU_HEALTH_CHECK_STATUS:-'200'}" \
      | tee $WORK/target-group.json

    local newTgArn=$(cat $WORK/target-group.json \
            | jq -r '.TargetGroups[].TargetGroupArn')
    aws elbv2 modify-target-group-attributes --target-group-arn $newTgArn \
      --attributes Key=deregistration_delay.timeout_seconds,Value=$TG_DRAIN_SECONDS
  else
    echo "Target Group $tgName already exists: $(targetGroupArn)"
  fi
}

deleteTargetGroup() {
  local tgName
  tgName=$(tgName) || exit 1
  local targetGroupArn=$(targetGroupArn)
  cacheDelete "tg-arn-$tgName"
  echo "Deleting Target Group: $tgName"
  aws elbv2 delete-target-group \
  --target-group-arn $targetGroupArn
}

albName() {
  [ -z "$COLOR" ] && usage "Color not specified"
  echo $COLOR-$ALB_SUFFIX
}

albArn() {
  local albName="$1"
  local cached=$(cacheGet "alb-arn-$albName")
  if [ -n "$cached" ]; then
    echo "$cached"
  else
    local alb=$(aws elbv2 describe-load-balancers --names $albName \
      | jq -r .LoadBalancers[].LoadBalancerArn)
    cacheSet "alb-arn-$albName" "$alb"
    echo "$alb"
  fi
}

albHttpsListener() {
  local alb="$1"
  local cached=$(cacheGet "https-$alb")
  if [ -n "$cached" ]; then
    echo "$cached"
  else
    local listener=$(aws elbv2 describe-listeners --load-balancer-arn $alb \
      | jq -r '.Listeners[] | select(.Protocol == "HTTPS").ListenerArn')
    cacheSet "https-$alb" "$listener"
    echo "$listener"
  fi
}

#
# Create a rule on a given ALB's listener
#
createRule() {
  local tgName
  tgName=$(tgName) || exit 1
  local targetGroupArn=$(targetGroupArn)

  #
  # Make sure we have an ALB to attach to
  #
  local albName
  albName=$(albName) || exit 1
  local alb=$(albArn $albName)
  [ -z "$alb" ] && echo "No load balancer found for $albName" && exit 1

  #
  # Make sure the ALB has an HTTP listener
  #
  local listener=$(albHttpsListener $alb)
  [ -z "$listener" ] && echo "No HTTPS listener on $albName" && exit 1

  echo "Updating HTTPS listener $albName"
  echo "Load balancer: $alb"
  echo "Listener: $listener"

  [ -z "$RULE_PATH" ] && echo "No Rule-Path specified for rule creation" && exit 1
  echo "Creating Rule Path: $RULE_PATH"

  local ruleArns=$(ruleArn $listener "$RULE_PATH")
  echo "Found existing rule ARNs: ${ruleArns:-none}"

  local temp=$(mktemp)
  #
  # If this rule does not exist on the LB, create it
  # Otherwise, we need to prevent downtime. Find any existing rules
  # with a matching path, and remember them. Then create the new rule. Once created,
  # delete old matches.
  #

  # To prevent rate-limiting, wait a second
  sleep 1

  aws elbv2 create-rule \
    --listener-arn $listener \
    --actions Type=forward,TargetGroupArn=$targetGroupArn \
    --conditions Field=path-pattern,Values="$RULE_PATH" \
    --priority $(nextAvailablePriority $listener) > $temp

  if [ "${DEBUG:-false}" == "true" ]; then
    cat $temp
  else
    printf "Created New Rule: "
    jq --compact-output \
      '.Rules[] | { ruleArn: .RuleArn, rulePriority: .Priority, rulePaths: .Conditions[].Values }' \
      $temp
  fi

  if [ -n "$ruleArns" ]
  then
    echo "Removing old version of rule $RULE_PATH"
    for ruleArn in $ruleArns
    do
      echo "Deleting rule $ruleArn"
      aws elbv2 delete-rule \
        --debug \
        --rule-arn "$ruleArn" \
        2> >(grep -A 1 "Response body" | tail -1 | sed -e "s/^b'\(.*\)'/\1/" -e 's/\\n//g')
    done
  fi
}

nextAvailablePriority() {
  #
  # Listeners require priority to be a value less than 50000.
  # Rules can have gaps in priority and we'll have to find them if they exist.
  # If no gap exists, then we'll append one
  #
  local listener=$1
  local out=$WORK/rule-priorities
  aws elbv2 describe-rules --listener-arn $listener \
    | jq -r '.Rules[].Priority' \
    | sed 's/default/1/' \
    | sort -n \
    | awk -v min=$MIN_PRIORITY '$1 >= min { print } END { print min-1 }' \
    | sort -nu \
    > $out

  #
  # Find any gaps in the priority list, use the first one if found
  #
  local gap=$(seq $MIN_PRIORITY $(tail -1 $out) \
    | diff - $out \
    | grep -m 1 '<' \
    | sed 's/[^0-9]//g')
  [ -n "$gap" ] && echo $gap && return

  #
  # If no gap is found, use the next in sequence
  #
  local last=$(tail -1 $out)
  echo $(($last + 1))
}

ruleArn() {
  local listenerArn="$1"
  local path="$2"

  # Will echo empty string when none match
  aws elbv2 describe-rules --listener-arn $listenerArn \
    | jq -r ".Rules[] | select(.Conditions[].Values[] | contains(\"$path\")) | .RuleArn"
}

deleteRule() {

  #
  # Make sure we have an ALB to attach to
  #
  local albName
  albName=$(albName) || exit 1
  local alb=$(albArn $albName)
  [ -z "$alb" ] && echo "No load balancer found for $albName" && exit 1

  #
  # Make sure the ALB has an HTTP listener
  #
  local listener=$(albHttpsListener $alb)
  [ -z "$listener" ] && echo "No HTTPS listener on $albName" && exit 1

  echo "Updating HTTPS listener $albName"
  echo "Load balancer: $alb"
  echo "Listener: $listener"

  #
  # Find the RULE-ARN for the corresponding RULE_PATH marked for deletion
  #
  [ -z "$RULE_PATH" ] && echo "No Rule-Path specified for rule deletion." && exit 1
  local ruleArns=$(ruleArn $listener "$RULE_PATH")

  for ruleArn in $ruleArns
  do
    echo "Deleting: Rule-Arn: $ruleArn"
    aws elbv2 delete-rule --rule-arn "$ruleArn"
  done
}

deleteAllRules() {
  #
  # Make sure we have an ALB to attach to
  #
  local albName
  albName=$(albName) || exit 1
  local alb=$(albArn $albName)
  [ -z "$alb" ] && echo "No load balancer found for $albName" && exit 1

  #
  # Make sure the ALB has an HTTP listener
  #
  local listener=$(albHttpsListener $alb)
  [ -z "$listener" ] && echo "No HTTPS listener on $albName" && exit 1

  echo "Updating HTTPS listener $albName"
  echo "Load balancer: $alb"
  echo "Listener: $listener"

  local rulesArns=$(aws elbv2 describe-rules --listener-arn $listener \
   | jq -r '.Rules[] | .RuleArn , .Priority' \
   | paste -sd " \n" | grep -v default | awk  '{print $1}')

  local pids=()
  for ruleArn in $rulesArns; do
    echo "Deleting: Rule-Arn: $ruleArn"
    aws elbv2 delete-rule --rule-arn "$ruleArn" &
    pids+=($!)
  done

  local fail=0
  for pid in ${pids[@]}
  do
    wait $pid
    if [ $? != 0 ]; then fail=$(($fail + 1)); fi
  done

  if [ $fail != 0 ]; then echo "Failed to delete $fail rules"; exit 1; fi
}

enableTargetGroup() {
  local tgName
  tgName=$(tgName) || exit 1
  local targetGroupArn=$(targetGroupArn)

  [ -z "$AZ_ABREVIATION" ] && echo "Target Availability Zone Abreviation not set." && exit 1
  aws autoscaling attach-load-balancer-target-groups \
      --auto-scaling-group-name "kubernetes-$CLUSTER_ID$AZ_ABREVIATION-autoscaling" \
      --target-group-arns $targetGroupArn
}

disableTargetGroup() {
  local tgName
  tgName=$(tgName) || exit 1
  local targetGroupArn=$(targetGroupArn)
  local autoscaleGroupName="kubernetes-$CLUSTER_ID$AZ_ABREVIATION-autoscaling"

  local targetGroupCount=$(aws autoscaling describe-load-balancer-target-groups \
      --auto-scaling-group-name $autoscaleGroupName | grep -oc "$targetGroupArn")

  [ -z "$AZ_ABREVIATION" ] && echo "Target Availability Zone Abreviation not set."

  if [ $targetGroupCount -gt 0 ]
  then
      echo "Detaching $targetGroupArn"
      aws autoscaling detach-load-balancer-target-groups \
          --auto-scaling-group-name $autoscaleGroupName \
          --target-group-arns $targetGroupArn
  else
    echo "Target Group $targetGroupArn does not exist in autoscaling group $autoscaleGroupName"
    echo "Skipping target group detachment..."
  fi
}

listRules() {
  #
  # Make sure we have an ALB to attach to
  #
  local albName
  albName=$(albName) || exit 1
  local alb=$(albArn $albName)
  [ -z "$alb" ] && echo "No load balancer found for $albName" && exit 1

  #
  # Make sure the ALB has an HTTP listener
  #
  local listener=$(albHttpsListener $alb)
  [ -z "$listener" ] && echo "No HTTPS listener on $albName" && exit 1

  aws elbv2 describe-rules --listener-arn $listener \
    | jq -r '.Rules[]| select(.Actions[0].Type == "forward") | .Priority, .Conditions[].Values[], .Actions[].TargetGroupArn' \
    > $WORK/rules

  while read priority
  do
    read path
    read tgArn
    echo -n "$priority $path " > $WORK/rule.$priority
    # 2021-01-20, let's see who is missing this if I remove status from the output.
    # It's expensive and eating into our rate limit hard.
    echo > $WORK/rule.$priority
    # ^ delete that if we restore the health status
    # aws elbv2 describe-target-health \
    #    --target-group-arn $tgArn \
    #    --query 'TargetHealthDescriptions[*]' \
    #  | jq -r '.[] | .TargetHealth.State' \
    #  | awk 'BEGIN {h=0;u=0;w="OK"} /^healthy/ { h++ } /^unhealthy/ {u++;w="UNHEALTHY"} END {print h " " u " " (h+u) " " w}' \
    #        >> $WORK/rule.$priority &
  done < $WORK/rules
  # wait
  # echo "PRIORITY RULE HEALTHY UNHEALTHY TOTAL STATUS" > $WORK/rule.summary
  local filter=.
  # [ "$LIST_UNHEALTHY_RULES_ONLY" == true ] && filter="UNHEALTHY"
  cat $WORK/rule.[0-9]* | grep $filter | sort -n >> $WORK/rule.summary
  # cat $WORK/rule.[0-9]* | awk '{h+=$3;u+=$4;t+=$5} END {print "TOTAL - " h " " u " " t}' >> $WORK/rule.summary
  cat $WORK/rule.summary | column -t
}

ruleHealth() {
  #
  # Make sure we have an ALB to attach to
  #
  local albName
  albName=$(albName) || exit 1
  local alb=$(albArn $albName)
  [ -z "$alb" ] && echo "No load balancer found for $albName" && exit 1

  #
  # Make sure the ALB has an HTTP listener
  #
  local listener=$(albHttpsListener $alb)
  [ -z "$listener" ] && echo "No HTTPS listener on $albName" && exit 1

  [ -z "$RULE_PATH" ] && echo "Rule-path not specified." && exit 1

  debug "ALB $alb"
  echo "Path $RULE_PATH"

  #
  # Find the Target Group associated to a rule-path
  #
  local tgArn=$(aws elbv2 describe-rules --listener-arn $listener \
      | jq -r '.Rules[] | .RuleArn , .Conditions[].Values[] , .Actions[].TargetGroupArn' \
      | paste -sd "  \n" | grep -F "$RULE_PATH" | awk '{print $3}' | head -1)

  [ -z "$tgArn" ] && echo "Can't find target group associated to rule: $RULE_PATH" && exit 1

  local healths=$(aws elbv2 describe-target-health \
      --target-group-arn $tgArn \
      --query 'TargetHealthDescriptions[*]' \
      | jq -r '.[] | .Target.Id, .TargetHealth.State' \
      | paste -s -d',\n')

  [ -z "$healths" ] && echo "Can't find target group state" && exit 1

  for target in $healths
  do
    local targetId=$(echo $target | cut -d ',' -f1)
    local targetHealth=$(echo $target | cut -d ',' -f2)

    local targetAz=$(targetLocation $targetId)

    case $targetAz in
      us-gov-west-1a) azA+=("$targetHealth");;
      us-gov-west-1b) azB+=("$targetHealth");;
      us-gov-west-1c) azC+=("$targetHealth");;
      *) unknown+=("$targetHealth");;
    esac
  done

  [ ${#azA[@]} -gt 0 ] && echo "us-gov-west-1a: ${azA[@]}"
  [ ${#azB[@]} -gt 0 ] && echo "us-gov-west-1b: ${azB[@]}"
  [ ${#azC[@]} -gt 0 ] && echo "us-gov-west-1c: ${azC[@]}"
  [ ${#unknown[@]} -gt 0 ] && echo "unknown: ${unknown[@]}"

  local unhealthy=$(echo "${azA[@]} ${azB[@]} ${azC[@]} ${unknown[@]}" \
    | sed 's/ /\n/g' \
    | grep . \
    | grep -c -v -E '^healthy$')

  if [ $unhealthy -gt 0 ]; then
    echo "Targets are not healthy." && exit 1
  fi
  echo "All targets are healthy." && exit 0
}

#============================================================
#
# Utility Commands
#
#============================================================
listEnvironments() {
  aws ec2 describe-vpcs \
    | jq -r '.Vpcs[].Tags[] | select(.Key == "Environment").Value' \
    | sort
}

#============================================================
#
# Set some defaults
#
#============================================================
CLUSTER_ID=
HEALTH_CHECK_INTERVAL=5
HEALTH_CHECK_TIMEOUT=2
HEALTH_CHECK_HEALTHY_THRESHOLD=2
HEALTH_CHECK_UNHEALTHY_THRESHOLD=2
MIN_PRIORITY=1
TG_DRAIN_SECONDS=60
LIST_UNHEALTHY_RULES_ONLY=false

HEALTH_CHECK_OPTIONS="health-check-path:,health-check-interval:,health-check-timeout:,health-check-healthy-threshold:,health-check-unhealthy-threshold"
LIST_RULES_OPTIONS="unhealthy"

ARGS=$(getopt -n $(basename ${0}) \
    -l "product:,cluster-id:,az-abreviation:,color:,tg-drain-seconds:,debug,environment:,help,min-priority:,rule-path:,$HEALTH_CHECK_OPTIONS,$LIST_RULES_OPTIONS" \
    -o "xh" -- "$@")
[ $? != 0 ] && usage
eval set -- "$ARGS"
while true
do
  case "$1" in
    --environment) VPC_ENV="$2";;
    --product) PRODUCT="$2";;
    --color) COLOR="$2";;
    --cluster-id) CLUSTER_ID="$2";;
    --az-abreviation) AZ_ABREVIATION="$2";;
    -x|--debug) set -x;;
    -h|--help) usage "halp! what this do?";;
    --health-check-path) HEALTH_CHECK_PATH="$2";;
    --health-check-interval) HEALTH_CHECK_INTERVAL="$2";;
    --health-check-timeout) HEALTH_CHECK_TIMEOUT="$2";;
    --health-check-healthy-threshold) HEALTH_CHECK_HEALTHY_THRESHOLD="$2";;
    --health-check-unhealthy-threshold) HEALTH_CHECK_UNHEALTHY_THRESHOLD="$2";;
    --min-priority) MIN_PRIORITY="$2";;
    --tg-drain-seconds) TG_DRAIN_SECONDS="$2";;
    --rule-path) RULE_PATH="$2";;
    --unhealthy) LIST_UNHEALTHY_RULES_ONLY=true;;
    --) shift;break;;
  esac
  shift;
done

#
# Parse Command
#
COMMAND=$1
[ -z "$COMMAND" ] && usage "No command specified"

[ -z "$VPC_ENV" ] && usage "Environment not specified"
ALB_SUFFIX=${VPC_ENV,,}-kubernetes

#
# Information commands do not have the same checks
# that action commands haves
#
case $COMMAND in
  le|list-environments) listEnvironments; exit 0;;
  list-rules) listRules; exit 0;;
esac

vpcId > /dev/null
[ -z "$CLUSTER_ID" ] && usage "Cluster ID not specified"

case $COMMAND in
  ctg|create-target-group) createTargetGroup;;
  dtg|delete-target-group) deleteTargetGroup;;
  cr|create-rule) createRule;;
  dr|delete-rule) deleteRule;;
  da|delete-all-rules) deleteAllRules;;
  tg-on|enable-target-group) enableTargetGroup;;
  tg-off|disable-target-group) disableTargetGroup;;
  rule-health) ruleHealth;;
  *) usage "Unkown command";;
esac
